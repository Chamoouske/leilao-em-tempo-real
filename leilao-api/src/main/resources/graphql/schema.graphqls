scalar DateTime

input AuctionInput {
    name: String!
    description: String
}

input BidInput {
    auctionId: Int!
    bidderId: String!
    amount: Float!
    version: Int!
}

input SearchBidInput {
    auctionId: Int
    bidderId: String
    description: String
    amount: Float
}

type Auction {
    id: Int!
    name: String!
    description: String
    status: String
    endDate: DateTime
    version: Int
    createdAt: DateTime
    currentBid: Float
    currentBidder: String
}

type Bid {
    auctionId: Int!
    bidderId: String!
    amount: Float!
    version: Int!
}

type PublishResponse {
    success: Boolean!
    message: String!
    auctionId: ID!
}

type Query {
    auctions(input: SearchBidInput!): [Auction]!
}

type Mutation {
    createAuction(input: AuctionInput!): PublishResponse!
    createBid(input: BidInput!): PublishResponse!
}